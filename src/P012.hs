module P012 (main, solveBasic, triangles) where

{-
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
-}

import qualified Common as C
import qualified Control.Arrow as A

input :: Int
input = 500

main :: IO ()
main = -- do
  C.time "P012(Basic): " $ solveBasic input

triangles :: [Int]
triangles = scanl (+) 1 [2..]

-- 素因数分解の結果から約数の個数を出す
solveBasic :: Int -> Int
solveBasic = fst . head . flip dropWhile (map (id A.&&& divisorCount) triangles) . flip (.) snd . flip (<=)
  where divisorCount = product . map ((+ 1) . fst) . C.primeFactors . fromIntegral

{-
FIXME 素因数の個数を O(n^(1/3)) で出せるアルゴリズムがあるようなので試す
http://pekempey.hatenablog.com/entry/2016/02/09/213718
-}
